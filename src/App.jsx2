import React, { useEffect, useState } from "react";

function JobCard({ job, onClick }) {
  return (
    <div
      className="bg-white shadow-lg rounded-lg p-6 mb-4 transition-all duration-300 hover:shadow-xl cursor-pointer"
      onClick={() => onClick(job)}
    >
      <h3 className="text-xl font-semibold text-indigo-600">{job.title}</h3>
      <p className="text-sm text-gray-600 mt-2">{job.company}</p>
      <p className="text-sm text-gray-500">{job.location}</p>
      <p className="text-sm text-gray-700 mt-3">
        {job.description.substring(0, 100)}...
      </p>
      <p className="text-lg font-bold text-green-600 mt-4">
        ${job.salary.toLocaleString()}/year
      </p>
    </div>
  );
}

function JobList({ jobs, viewMode, onJobClick }) {
  return (
    <div
      className={`grid ${
        viewMode === "grid"
          ? "grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
          : "grid-cols-1 gap-4"
      }`}
    >
      {jobs.map((job) => (
        <JobCard key={job.id} job={job} onClick={onJobClick} />
      ))}
    </div>
  );
}

function JobSearch({ onSearch, onSort }) {
  const [keyword, setKeyword] = useState("");

  const handleSearch = (e) => {
    e.preventDefault();
    onSearch(keyword);
  };

  return (
    <div className="mb-8 bg-white p-6 rounded-lg shadow-md">
      <form onSubmit={handleSearch} className="flex gap-2">
        <input
          type="text"
          value={keyword}
          onChange={(e) => setKeyword(e.target.value)}
          placeholder="Search jobs..."
          className="flex-grow p-2 border border-gray-300 rounded-l-full focus:outline-none focus:ring-2 focus:ring-indigo-500"
        />
        <button
          type="submit"
          className="bg-indigo-500 text-white px-6 py-2 rounded-r-full hover:bg-indigo-600 transition-colors duration-300"
        >
          Search
        </button>
      </form>
      <select
        onChange={(e) => onSort(e.target.value)}
        className="mt-4 p-2 border border-gray-300 rounded-full w-full focus:outline-none focus:ring-2 focus:ring-indigo-500"
      >
        <option value="newest">Newest First</option>
        <option value="salary">Highest Salary</option>
      </select>
    </div>
  );
}

function AdminPanel({ onAddJob }) {
  const [newJob, setNewJob] = useState({
    title: "",
    company: "",
    location: "",
    description: "",
    salary: "",
  });

  const handleSubmit = (e) => {
    e.preventDefault();
    onAddJob({ ...newJob, id: Date.now() });
    setNewJob({
      title: "",
      company: "",
      location: "",
      description: "",
      salary: "",
    });
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setNewJob((prev) => ({ ...prev, [name]: value }));
  };

  return (
    <div className="bg-white p-6 rounded-lg shadow-md mb-8">
      <h2 className="text-2xl font-semibold mb-4 text-indigo-600">
        Add New Job
      </h2>
      <form onSubmit={handleSubmit} className="space-y-4">
        <input
          type="text"
          name="title"
          value={newJob.title}
          onChange={handleChange}
          placeholder="Job Title"
          className="w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-indigo-500"
          required
        />
        <input
          type="text"
          name="company"
          value={newJob.company}
          onChange={handleChange}
          placeholder="Company"
          className="w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-indigo-500"
          required
        />
        <input
          type="text"
          name="location"
          value={newJob.location}
          onChange={handleChange}
          placeholder="Location"
          className="w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-indigo-500"
          required
        />
        <textarea
          name="description"
          value={newJob.description}
          onChange={handleChange}
          placeholder="Job Description"
          className="w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-indigo-500"
          required
        ></textarea>
        <input
          type="number"
          name="salary"
          value={newJob.salary}
          onChange={handleChange}
          placeholder="Salary"
          className="w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-indigo-500"
          required
        />
        <button
          type="submit"
          className="bg-green-500 text-white px-6 py-2 rounded-full hover:bg-green-600 transition-colors duration-300"
        >
          Add Job
        </button>
      </form>
    </div>
  );
}

function LoginForm({ onLogin, onClose }) {
  const [credentials, setCredentials] = useState({
    username: "",
    password: "",
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setCredentials((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    onLogin(credentials);
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center">
      <div className="bg-white p-8 rounded-lg shadow-xl w-96">
        <h2 className="text-2xl font-semibold mb-4 text-indigo-600">
          Admin Login
        </h2>
        <form onSubmit={handleSubmit} className="space-y-4">
          <input
            type="text"
            name="username"
            value={credentials.username}
            onChange={handleChange}
            placeholder="Username"
            className="w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-indigo-500"
            required
          />
          <input
            type="password"
            name="password"
            value={credentials.password}
            onChange={handleChange}
            placeholder="Password"
            className="w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-indigo-500"
            required
          />
          <div className="flex justify-between">
            <button
              type="submit"
              className="bg-indigo-500 text-white px-4 py-2 rounded-full hover:bg-indigo-600 transition-colors duration-300"
            >
              Login
            </button>
            <button
              onClick={onClose}
              className="bg-gray-300 text-gray-700 px-4 py-2 rounded-full hover:bg-gray-400 transition-colors duration-300"
            >
              Cancel
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}

function JobDescription({ job, onClose }) {
  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center">
      <div className="bg-white p-8 rounded-lg shadow-xl w-full max-w-2xl">
        <h2 className="text-3xl font-semibold mb-4 text-indigo-600">
          {job.title}
        </h2>
        <p className="text-xl text-gray-600 mb-2">{job.company}</p>
        <p className="text-lg text-gray-500 mb-4">{job.location}</p>
        <p className="text-gray-700 mb-4">{job.description}</p>
        <p className="text-2xl font-bold text-green-600 mb-6">
          ${job.salary.toLocaleString()}/year
        </p>
        <div className="flex justify-between">
          <button className="bg-indigo-500 text-white px-6 py-2 rounded-full hover:bg-indigo-600 transition-colors duration-300">
            Apply Now
          </button>
          <button
            onClick={onClose}
            className="bg-gray-300 text-gray-700 px-6 py-2 rounded-full hover:bg-gray-400 transition-colors duration-300"
          >
            Close
          </button>
        </div>
      </div>
    </div>
  );
}

function JobPortal() {
  const [jobs, setJobs] = useState([]);
  const [filteredJobs, setFilteredJobs] = useState([]);
  const [isAdmin, setIsAdmin] = useState(false);
  const [viewMode, setViewMode] = useState("grid");
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [showLoginForm, setShowLoginForm] = useState(false);
  const [selectedJob, setSelectedJob] = useState(null);

  useEffect(() => {
    // Simulating fetching jobs from an API
    const fetchedJobs = [
      {
        id: 1,
        title: "Software Engineer",
        company: "Tech Co",
        location: "New York",
        description:
          "Exciting role for a skilled developer with expertise in React and Node.js. You will be working on cutting-edge projects and collaborating with a talented team.",
        salary: 100000,
      },
      {
        id: 2,
        title: "Data Analyst",
        company: "Data Inc",
        location: "San Francisco",
        description:
          "We are seeking a data analyst to join our growing team. The ideal candidate will have strong SQL skills and experience with data visualization tools.",
        salary: 90000,
      },
      {
        id: 3,
        title: "Product Manager",
        company: "Innovate LLC",
        location: "Chicago",
        description:
          "Lead product development initiatives for our SaaS platform. You should have a track record of successful product launches and excellent communication skills.",
        salary: 110000,
      },
    ];
    setJobs(fetchedJobs);
    setFilteredJobs(fetchedJobs);
  }, []);

  const handleSearch = (keyword) => {
    const filtered = jobs.filter(
      (job) =>
        job.title.toLowerCase().includes(keyword.toLowerCase()) ||
        job.company.toLowerCase().includes(keyword.toLowerCase()) ||
        job.description.toLowerCase().includes(keyword.toLowerCase())
    );
    setFilteredJobs(filtered);
  };

  const handleSort = (criteria) => {
    let sorted;
    if (criteria === "newest") {
      sorted = [...filteredJobs].sort((a, b) => b.id - a.id);
    } else if (criteria === "salary") {
      sorted = [...filteredJobs].sort((a, b) => b.salary - a.salary);
    }
    setFilteredJobs(sorted);
  };

  const handleAddJob = (newJob) => {
    setJobs((prev) => [...prev, newJob]);
    setFilteredJobs((prev) => [...prev, newJob]);
  };

  const handleLogin = (credentials) => {
    // This is a mock authentication. In a real application, you would validate against a backend.
    if (
      credentials.username === "admin" &&
      credentials.password === "password"
    ) {
      setIsAuthenticated(true);
      setIsAdmin(true);
      setShowLoginForm(false);
    } else {
      alert("Invalid credentials");
    }
  };

  const handleLogout = () => {
    setIsAuthenticated(false);
    setIsAdmin(false);
  };

  const handleJobClick = (job) => {
    setSelectedJob(job);
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="flex justify-between items-center mb-8">
        <h1 className="text-4xl font-bold text-indigo-600">Job Portal</h1>
        {isAuthenticated ? (
          <button
            onClick={handleLogout}
            className="bg-red-500 text-white px-4 py-2 rounded-full hover:bg-red-600 transition-colors duration-300"
          >
            Logout
          </button>
        ) : (
          <button
            onClick={() => setShowLoginForm(true)}
            className="bg-indigo-500 text-white px-4 py-2 rounded-full hover:bg-indigo-600 transition-colors duration-300"
          >
            Admin Login
          </button>
        )}
      </div>
      {isAdmin && <AdminPanel onAddJob={handleAddJob} />}
      <div className="mb-4 flex justify-end">
        <button
          onClick={() => setViewMode("grid")}
          className={`mr-2 px-4 py-2 rounded-full ${
            viewMode === "grid"
              ? "bg-indigo-500 text-white"
              : "bg-gray-200 text-gray-700"
          } hover:bg-indigo-600 hover:text-white transition-colors duration-300`}
        >
          Grid
        </button>
        <button
          onClick={() => setViewMode("list")}
          className={`px-4 py-2 rounded-full ${
            viewMode === "list"
              ? "bg-indigo-500 text-white"
              : "bg-gray-200 text-gray-700"
          } hover:bg-indigo-600 hover:text-white transition-colors duration-300`}
        >
          List
        </button>
      </div>
      <JobSearch onSearch={handleSearch} onSort={handleSort} />
      <JobList
        jobs={filteredJobs}
        viewMode={viewMode}
        onJobClick={handleJobClick}
      />
      {showLoginForm && (
        <LoginForm
          onLogin={handleLogin}
          onClose={() => setShowLoginForm(false)}
        />
      )}
      {selectedJob && (
        <JobDescription
          job={selectedJob}
          onClose={() => setSelectedJob(null)}
        />
      )}
    </div>
  );
}

export default function App() {
  return (
    <div className="min-h-screen bg-gray-100">
      <JobPortal />
    </div>
  );
}
